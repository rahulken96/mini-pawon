//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/AksiInput/AksiInputPemain.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AksiInputPemain: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AksiInputPemain()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AksiInputPemain"",
    ""maps"": [
        {
            ""name"": ""Pemain"",
            ""id"": ""92af7eba-5b8a-48fd-8987-f0347494a8e7"",
            ""actions"": [
                {
                    ""name"": ""AksiGerak"",
                    ""type"": ""Value"",
                    ""id"": ""17d541c7-d701-45b5-8ef7-c722eb25ef81"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interaksi"",
                    ""type"": ""Button"",
                    ""id"": ""17618230-bf16-4ccd-82e5-d3eb1e33c0b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Motong"",
                    ""type"": ""Button"",
                    ""id"": ""10bb227d-9582-4592-b627-0d43cefe82a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0e4df429-03c7-4aac-8aef-13407138af29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0c28a607-736d-40df-8b2b-5f81c4cb837a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AksiGerak"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""950c56cc-af9e-4d30-9844-44bfdb171dd2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AksiGerak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""64b3eb58-7af9-4929-8363-fc0286a98dd3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AksiGerak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""18630c06-c747-4146-96ab-f1b8fe5d584c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AksiGerak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""077d580d-3e89-491f-a21e-a9ade79454b3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AksiGerak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e5c1bcb2-8363-45fa-9a65-1fccb7aac85e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaksi"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69373aff-f714-4953-bc70-1053bea727be"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motong"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8aaeb6c8-f1ce-418c-90ef-7b413430b149"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pemain
        m_Pemain = asset.FindActionMap("Pemain", throwIfNotFound: true);
        m_Pemain_AksiGerak = m_Pemain.FindAction("AksiGerak", throwIfNotFound: true);
        m_Pemain_Interaksi = m_Pemain.FindAction("Interaksi", throwIfNotFound: true);
        m_Pemain_Motong = m_Pemain.FindAction("Motong", throwIfNotFound: true);
        m_Pemain_Pause = m_Pemain.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pemain
    private readonly InputActionMap m_Pemain;
    private List<IPemainActions> m_PemainActionsCallbackInterfaces = new List<IPemainActions>();
    private readonly InputAction m_Pemain_AksiGerak;
    private readonly InputAction m_Pemain_Interaksi;
    private readonly InputAction m_Pemain_Motong;
    private readonly InputAction m_Pemain_Pause;
    public struct PemainActions
    {
        private @AksiInputPemain m_Wrapper;
        public PemainActions(@AksiInputPemain wrapper) { m_Wrapper = wrapper; }
        public InputAction @AksiGerak => m_Wrapper.m_Pemain_AksiGerak;
        public InputAction @Interaksi => m_Wrapper.m_Pemain_Interaksi;
        public InputAction @Motong => m_Wrapper.m_Pemain_Motong;
        public InputAction @Pause => m_Wrapper.m_Pemain_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Pemain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PemainActions set) { return set.Get(); }
        public void AddCallbacks(IPemainActions instance)
        {
            if (instance == null || m_Wrapper.m_PemainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PemainActionsCallbackInterfaces.Add(instance);
            @AksiGerak.started += instance.OnAksiGerak;
            @AksiGerak.performed += instance.OnAksiGerak;
            @AksiGerak.canceled += instance.OnAksiGerak;
            @Interaksi.started += instance.OnInteraksi;
            @Interaksi.performed += instance.OnInteraksi;
            @Interaksi.canceled += instance.OnInteraksi;
            @Motong.started += instance.OnMotong;
            @Motong.performed += instance.OnMotong;
            @Motong.canceled += instance.OnMotong;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPemainActions instance)
        {
            @AksiGerak.started -= instance.OnAksiGerak;
            @AksiGerak.performed -= instance.OnAksiGerak;
            @AksiGerak.canceled -= instance.OnAksiGerak;
            @Interaksi.started -= instance.OnInteraksi;
            @Interaksi.performed -= instance.OnInteraksi;
            @Interaksi.canceled -= instance.OnInteraksi;
            @Motong.started -= instance.OnMotong;
            @Motong.performed -= instance.OnMotong;
            @Motong.canceled -= instance.OnMotong;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPemainActions instance)
        {
            if (m_Wrapper.m_PemainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPemainActions instance)
        {
            foreach (var item in m_Wrapper.m_PemainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PemainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PemainActions @Pemain => new PemainActions(this);
    public interface IPemainActions
    {
        void OnAksiGerak(InputAction.CallbackContext context);
        void OnInteraksi(InputAction.CallbackContext context);
        void OnMotong(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
